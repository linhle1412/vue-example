stages:
  - npm
  - build
  - package
  - dev

.node_cache: &node_cache
  key: tnv-web
  paths:
    - node_modules/
  policy: pull

npm:
  image: node:lts-alpine
  stage: npm
  cache:
    <<: *node_cache
    policy: pull-push
  script:
    - npm install
  only:
    refs:
      - master
    # changes:
    #   - package.json
  except:
    - tags

build:
  image: node:lts-alpine
  stage: build
  cache:
    <<: *node_cache
  script:
    - npm run build
  artifacts:
    paths:
      - .nuxt
    expire_in: 6h
  only:
    - master

package_docker:
  image: registry.gitlab.com/eye-solution/devops/node-docker/docker-alpine:v1.0
  stage: package
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  script:
    - docker ps
    - |
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials..."
        echo $CI_REGISTRY_PASSWORD | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
      fi
    - DOCKER_IMAGE=$CI_REGISTRY_IMAGE
    - docker build -f Dockerfile.v2 -t $DOCKER_IMAGE:$CI_PIPELINE_ID -t $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:$CI_PIPELINE_ID
    # make sure tag latest is the latest version
    - docker push $DOCKER_IMAGE:latest
  only:
    - master

deploy_dev:
  image: alpine
  stage: dev
  environment:
    name: development
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${SSH_SERVER} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying application... $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID"
    - ssh ${SSH_USER}@${SSH_SERVER} "
      export DOCKER_WEB_IMAGE=$CI_REGISTRY_IMAGE:$CI_PIPELINE_ID &&
      cd ./${PROJECT_NAME}/deployment &&
      docker pull $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID &&
      docker-compose -p ${PROJECT_NAME} stop web &&
      docker-compose -p ${PROJECT_NAME} rm -f web &&
      docker-compose -p ${PROJECT_NAME} up -d web
      "
    - echo "Application successfully deployed."
  only:
    - master
  dependencies: []
